# Battleship Game

# Specifications
# -----------------
# 2-player strategy game
# 10x10 grid for each player
# 5 ship types with varying squares: Carrier (5), Battleship (4), Cruiser (3), Submarine (3), Destroyer (2)
# Ships occupy contiguous squares, arranged horizontally or vertically
# Players take turns announcing grid squares, opponent announces hit or miss
# Game ends when one player sinks all opponent's ships

class Grid:
    def __init__(self):
        # Initialize 10x10 grid for each player
        self.grid = [[None] * 10 for _ in range(10)]

class Ship:
    def __init__(self, name, length):
        # Initialize ship with name and length
        self.name = name
        self.length = length
        self.squares = []

    def place(self, row, col, orientation):
        # Place ship on grid with given row, col, and orientation
        if orientation == "horizontal":
            for i in range(self.length):
                self.squares.append((row, col + i))
        elif orientation == "vertical":
            for i in range(self.length):
                self.squares.append((row + i, col))

class Player:
    def __init__(self):
        # Initialize player with empty grid and fleet
        self.grid = Grid()
        self.fleet = [
            Ship("Carrier", 5),
            Ship("Battleship", 4),
            Ship("Cruiser", 3),
            Ship("Submarine", 3),
            Ship("Destroyer", 2)
        ]

    def place_ships(self):
        # Place ships on grid according to specifications
        for ship in self.fleet:
            valid_placement = False
            while not valid_placement:
                row = int(input("Enter row for " + ship.name + " (1-10): ")) - 1
                col = input("Enter column for " + ship.name + " (A-J): ").upper() - 65
                orientation = input("Enter orientation for " + ship.name + " (horizontal/vertical): ").lower()
                if 0 <= row < 10 and 0 <= col < 10 and orientation in ["horizontal", "vertical"]:
                    ship.place(row, col, orientation)
                    valid_placement = True

    def take_turn(self, opponent):

